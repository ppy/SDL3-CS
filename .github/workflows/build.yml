name: Build Native
on:
  workflow_dispatch:
    inputs: {}
#  schedule:
#    - cron: '0 0 * * *'
env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.platform.name }}
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { name: win-x64,     os: windows-latest, flags: -A x64                                                                            }
          - { name: win-x86,     os: windows-latest, flags: -A Win32                                                                          }
          - { name: win-arm64,   os: windows-latest, flags: -A ARM64                                                                          }
          - { name: linux-x64,   os: ubuntu-20.04,   flags: -GNinja, target_apt_arch: ":amd64"                                               }
          - { name: linux-x86,   os: ubuntu-20.04,   flags: -GNinja, cmake_configure_env: CFLAGS=-m32 CXXFLAGS=-m32, target_apt_arch: ":i386" }
          - { name: linux-arm64, os: ubuntu-20.04,   container: arm64v8/ubuntu }
          - { name: linux-arm,   os: ubuntu-20.04,   container: arm32v7/ubuntu }
          - { name: osx-x64,     os: macos-latest,   flags: -DCMAKE_OSX_ARCHITECTURES="x86_64" -DCMAKE_OSX_DEPLOYMENT_TARGET="10.14"          }
          # NOTE: macOS 11.0 is the first released supported by Apple Silicon.
          - { name: osx-arm64,   os: macos-latest,   flags: -DCMAKE_OSX_ARCHITECTURES="arm64" -DCMAKE_OSX_DEPLOYMENT_TARGET="11.0"            }
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'libsdl-org/SDL'
          ref: 'main'

      - uses: actions/checkout@v4
        with:
          path: 'SDL3-CS'

      - name: Set up QEMU
        if: contains(matrix.platform.container, 'arm')
        uses: docker/setup-qemu-action@v3

      - name: Build (Linux ARM)
        if: contains(matrix.platform.container, 'arm')
        uses: addnab/docker-run-action@v3
        with:
          image: ${{ matrix.platform.container }}
          options: -v ${{ github.workspace }}:/workspace
          run: |
            apt update -y -qq
            apt install -y \
              gcc \
              g++ \
              cmake \
              ninja-build \
              wayland-scanner++ \
              wayland-protocols \
              pkg-config \
              libasound2-dev \
              libdbus-1-dev \
              libegl1-mesa-dev \
              libgl1-mesa-dev \
              libgles2-mesa-dev \
              libglu1-mesa-dev \
              libibus-1.0-dev \
              libpulse-dev \
              libsndio-dev \
              libudev-dev \
              libwayland-dev \
              libx11-dev \
              libxcursor-dev \
              libxext-dev \
              libxi-dev \
              libxinerama-dev \
              libxkbcommon-dev \
              libxrandr-dev \
              libxss-dev \
              libxt-dev \
              libxv-dev \
              libxxf86vm-dev \
              libdrm-dev \
              libgbm-dev \
              libpulse-dev

            cd /workspace
            cmake -B build -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSDL_SHARED_ENABLED_BY_DEFAULT=ON -DSDL_STATIC_ENABLED_BY_DEFAULT=ON
            cmake --build build/ --config Release
            cmake --install build/ --prefix install_output --config Release
            
            mkdir -p SDL3-CS/native/${{ matrix.platform.name }}
            cp install_output/lib/libSDL3.so SDL3-CS/native/${{ matrix.platform.name }}/libSDL3.so

      - name: Build
        if: ${{ !contains(matrix.platform.container, 'arm') }}
        shell: bash
        run: |
          if [[ ${{ runner.os }} == 'Linux' ]]; then
            # Setup Linux dependencies
            if [[ ${{ matrix.platform.target_apt_arch }} == :i386 ]]; then
              sudo dpkg --add-architecture i386
            fi

            sudo apt-get update -y -qq

            if [[ ${{ matrix.platform.target_apt_arch }} == :i386 ]]; then
              # Workaround GitHub's ubuntu-20.04 image issue <https://github.com/actions/virtual-environments/issues/4589>
              sudo apt-get install -y --allow-downgrades libpcre2-8-0=10.34-7
            fi

            sudo apt-get install -y \
              gcc-multilib \
              g++-multilib \
              cmake \
              ninja-build \
              wayland-scanner++ \
              wayland-protocols \
              pkg-config${{ matrix.platform.target_apt_arch }} \
              libasound2-dev${{ matrix.platform.target_apt_arch }} \
              libdbus-1-dev${{ matrix.platform.target_apt_arch }} \
              libegl1-mesa-dev${{ matrix.platform.target_apt_arch }} \
              libgl1-mesa-dev${{ matrix.platform.target_apt_arch }} \
              libgles2-mesa-dev${{ matrix.platform.target_apt_arch }} \
              libglu1-mesa-dev${{ matrix.platform.target_apt_arch }} \
              libibus-1.0-dev${{ matrix.platform.target_apt_arch }} \
              libpulse-dev${{ matrix.platform.target_apt_arch }} \
              libsndio-dev${{ matrix.platform.target_apt_arch }} \
              libudev-dev${{ matrix.platform.target_apt_arch }} \
              libwayland-dev${{ matrix.platform.target_apt_arch }} \
              libx11-dev${{ matrix.platform.target_apt_arch }} \
              libxcursor-dev${{ matrix.platform.target_apt_arch }} \
              libxext-dev${{ matrix.platform.target_apt_arch }} \
              libxi-dev${{ matrix.platform.target_apt_arch }} \
              libxinerama-dev${{ matrix.platform.target_apt_arch }} \
              libxkbcommon-dev${{ matrix.platform.target_apt_arch }} \
              libxrandr-dev${{ matrix.platform.target_apt_arch }} \
              libxss-dev${{ matrix.platform.target_apt_arch }} \
              libxt-dev${{ matrix.platform.target_apt_arch }} \
              libxv-dev${{ matrix.platform.target_apt_arch }} \
              libxxf86vm-dev${{ matrix.platform.target_apt_arch }} \
              libdrm-dev${{ matrix.platform.target_apt_arch }} \
              libgbm-dev${{ matrix.platform.target_apt_arch }} \
              libpulse-dev${{ matrix.platform.target_apt_arch }}
          fi
          
          # Configure CMake
          ${{ matrix.platform.cmake_configure_env }} cmake -B build ${{ matrix.platform.flags }} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSDL_SHARED_ENABLED_BY_DEFAULT=ON -DSDL_STATIC_ENABLED_BY_DEFAULT=ON
          
          # Build
          cmake --build build/ --config Release

          if [[ ${{ runner.os }} == 'Windows' ]]; then
            # Install (Windows)
            cmake --install build/ --prefix install_output --config Release

            # Prepare release directory (Windows)
            mkdir -Force SDL3-CS/native/${{ matrix.platform.name }}
          else
            # Install
            sudo cmake --install build/ --prefix install_output --config Release

            # Prepare release directory
            mkdir -p SDL3-CS/native/${{ matrix.platform.name }}
          fi

          if [[ ${{ runner.os }} == 'Windows' ]]; then
            # Prepare release (Windows)
            cp install_output/bin/SDL3.dll SDL3-CS/native/${{ matrix.platform.name }}/SDL3.dll
          elif [[ ${{ runner.os }} == 'Linux' ]]; then
            # Prepare release (Linux)
            cp install_output/lib/libSDL3.so SDL3-CS/native/${{ matrix.platform.name }}/libSDL3.so
          elif [[ ${{ runner.os }} == 'macOS' ]]; then
            # Prepare release (macOS)
            cp install_output/lib/libSDL3.dylib SDL3-CS/native/${{ matrix.platform.name }}/libSDL3.dylib
          fi

      - name: Create pull request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: Update ${{ matrix.platform.name }} SDL binaries
          title: Update ${{ matrix.platform.name }} SDL binaries
          body: This PR has been auto-generated to update the ${{ matrix.platform.name }} SDL binaries.
          branch: update-${{ matrix.platform.name }}-binaries
          path: 'SDL3-CS'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

  build-ios:
    name: ios
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'libsdl-org/SDL'
          ref: 'main'

      - uses: actions/checkout@v4
        with:
          path: 'SDL3-CS'

      - name: Build (iOS)
        run: xcodebuild -project Xcode/SDL/SDL.xcodeproj -target SDL3.xcframework -configuration Release

      - name: Prepare release directory (iOS)
        run: mkdir -p SDL3-CS/native/ios

      - name: Prepare release (iOS)
        run: |
          mkdir -p SDL3-CS/native/ios/SDL3.xcframework/ios-arm64/SDL3.framework;
          mkdir -p SDL3-CS/native/ios/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework;
          cp Xcode/SDL/build/SDL3.xcframework/Info.plist                                           SDL3-CS/native/ios/SDL3.xcframework/Info.plist;
          cp Xcode/SDL/build/SDL3.xcframework/ios-arm64/SDL3.framework/SDL3                        SDL3-CS/native/ios/SDL3.xcframework/ios-arm64/SDL3.framework/SDL3;
          cp Xcode/SDL/build/SDL3.xcframework/ios-arm64/SDL3.framework/Info.plist                  SDL3-CS/native/ios/SDL3.xcframework/ios-arm64/SDL3.framework/Info.plist;
          cp Xcode/SDL/build/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework/SDL3       SDL3-CS/native/ios/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework/SDL3;
          cp Xcode/SDL/build/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework/Info.plist SDL3-CS/native/ios/SDL3.xcframework/ios-arm64_x86_64-simulator/SDL3.framework/Info.plist;

      - name: Create pull request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: Update iOS SDL binaries
          title: Update iOS SDL binaries
          body: This PR has been auto-generated to update the iOS SDL binaries
          branch: update-ios-binaries
          path: 'SDL3-CS'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'

  build-android:
    name: android
    runs-on: ubuntu-20.04
    env:
        NDK_VER: 23.1.7779620
        PLATFORM_VER: android-34
    steps:
      - uses: actions/checkout@v4
        with:
          repository: 'libsdl-org/SDL'
          ref: 'main'

      - uses: actions/checkout@v4
        with:
          path: 'SDL3-CS'

      - name: Setup JDK
        uses: actions/setup-java@v3
        with:
          distribution: microsoft
          java-version: |
            11
            17

      - name: Install Android SDK Manager
        uses: android-actions/setup-android@v3
        with:
          packages: ''

      - name: Install Android SDK
        run: |
          sdkmanager --install "platform-tools" "platforms;$PLATFORM_VER"
          sdkmanager --install "ndk;$NDK_VER" --channel=3

      - name: Build (Android)
        run: |
          export PATH=$ANDROID_HOME/ndk/$NDK_VER:$PATH
          export OUTPUT=$PWD/SDL3-CS/native/android
          rm -rf $OUTPUT && mkdir -p $OUTPUT

          # Build SDL3
          sed -i 's/abi=.*/abi="armeabi-v7a arm64-v8a x86 x86_64"/g' ./build-scripts/androidbuildlibs.sh
          ./build-scripts/androidbuildlibs.sh NDK_LIBS_OUT="$OUTPUT"

      - name: Build SDL3 Android Java
        run: |
          export JAVA_HOME=$JAVA_HOME_11_X64
          export PATH=$JAVA_HOME_11_X64/bin:$PATH
          export OUTPUT=$PWD/SDL3-CS/SDL3-CS.Android/Jars/
          rm -rf $OUTPUT && mkdir -p $OUTPUT

          # Build SDL3 Android Java part
          cd android-project/app/src/main/java
          javac -cp $ANDROID_HOME/platforms/$PLATFORM_VER/android.jar -encoding utf8 org/libsdl/app/*.java
          jar cvf $OUTPUT/SDL3AndroidBridge.jar org/libsdl/app/*.class

      - name: Create pull request
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: Update Android SDL binaries
          title: Update Android SDL binaries
          body: This PR has been auto-generated to update the Android SDL binaries
          branch: update-android-binaries
          path: 'SDL3-CS'
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
